package output

import (
	"errors"
	"fmt"
	"os"
	"path/filepath"
	"text/template"

	"github.com/yammerjp/optruck/pkg/op"
)

type EnvTemplateDest struct {
	Path string
}

func (d *EnvTemplateDest) GetPath() string {
	return d.Path
}

func (d *EnvTemplateDest) GetBasename() string {
	return filepath.Base(d.Path)
}

type envTemplateData struct {
	*op.SecretReference
	Dest *EnvTemplateDest
}

var ErrFileAlreadyExists = errors.New("file already exists")

func validateFileNotExists(path string) error {
	_, err := os.Stat(path)
	if err == nil {
		return ErrFileAlreadyExists
	}
	return nil
}

func (d *EnvTemplateDest) Write(secretReference *op.SecretReference, overwrite bool) error {
	if !overwrite {
		if err := validateFileNotExists(d.Path); err != nil {
			return err
		}
	}

	file, err := os.OpenFile(d.Path, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
	if err != nil {
		return fmt.Errorf("failed to open env template file: %v", err)
	}
	defer file.Close()

	tmpl, err := template.New("env-template").Parse(`# This file was generated by optruck.{{if .SecretReference.Account}}
#   - 1password account: {{.SecretReference.Account}}{{end}}{{if .SecretReference.VaultName}}
#   - 1password vault: {{.SecretReference.VaultName}}{{end}}
# To restore, run the following command:
#   $ op inject -i {{.Dest.GetBasename}} -o .env{{range .GetFieldRefs}}
{{.Label}}={{.Ref}}{{end}}
`)
	if err != nil {
		return err
	}

	data := &envTemplateData{
		SecretReference: secretReference,
		Dest:            d,
	}
	return tmpl.Execute(file, data)
}
