package output

import (
	"os"
	"path/filepath"
	"testing"

	"github.com/yammerjp/optruck/pkg/op"
)

func TestEnvTemplateDestWrite(t *testing.T) {
	// Create a temporary directory for test files
	tmpDir, err := os.MkdirTemp("", "optruck-test-*")
	if err != nil {
		t.Fatalf("failed to create temp dir: %v", err)
	}
	defer os.RemoveAll(tmpDir)

	testCases := []struct {
		name     string
		dest     *EnvTemplateDest
		resp     *op.SecretResponse
		expected string
	}{
		{
			name: "basic case",
			dest: &EnvTemplateDest{
				Path: filepath.Join(tmpDir, "test1.env"),
			},
			resp: &op.SecretResponse{
				VaultName:   "TestVault",
				AccountName: "test.1password.com",
				ItemName:    "TestItem",
				FieldLabels: []string{"DB_USER", "DB_PASS"},
			},
			expected: `# This file was generated by optruck.
#   - 1password vault: TestVault
#   - 1password account: test.1password.com
# To restore, run the following command:
#   $ cat test1.env | grep -v '^#' | op inject > .env

DB_USER={{op://TestVault/TestItem/DB_USER}}
DB_PASS={{op://TestVault/TestItem/DB_PASS}}

`,
		},
		{
			name: "without account name",
			dest: &EnvTemplateDest{
				Path: filepath.Join(tmpDir, "test2.env"),
			},
			resp: &op.SecretResponse{
				VaultName:   "TestVault",
				ItemName:    "TestItem",
				FieldLabels: []string{"API_KEY"},
			},
			expected: `# This file was generated by optruck.
#   - 1password vault: TestVault
# To restore, run the following command:
#   $ cat test2.env | grep -v '^#' | op inject > .env

API_KEY={{op://TestVault/TestItem/API_KEY}}

`,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			// Write the template
			err := tc.dest.Write(tc.resp)
			if err != nil {
				t.Fatalf("Write() error = %v", err)
			}

			// Read the generated file
			content, err := os.ReadFile(tc.dest.Path)
			if err != nil {
				t.Fatalf("failed to read generated file: %v", err)
			}

			// Compare the content
			if got := string(content); got != tc.expected {
				t.Errorf("Write() generated content mismatch\nwant:\n%s\ngot:\n%s", tc.expected, got)
			}
		})
	}
}
